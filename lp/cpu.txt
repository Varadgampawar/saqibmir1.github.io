/*
    Name : Sahil Chandan
    Div : A 
    Roll No : 10
*/

import java.util.Scanner;

class Task {
    int Id, Arrival_time , Burst_time, Starting_time, Completion_time, Waiting_time, Turn_around_time;
    Task(int Id, int Arrival_time, int Burst_time) {
        this.Id = Id;
        this.Arrival_time = Arrival_time;
        this.Burst_time = Burst_time;
    }
    public void Display() {

        System.out.println("P" + Id +"\t\t" +Arrival_time + "\t\t" + Burst_time + "\t\t" + Starting_time + "\t\t" + Waiting_time + "\t\t\t" + Turn_around_time);
    }
    
}

class Task2 {
    int Id, Arrival_time , Burst_time, Starting_time, priority, Waiting_time, Turn_around_time;
    Task2(int Id, int priority, int Burst_time) {
        this.Id = Id;
        this.priority= priority;
        this.Burst_time = Burst_time;
    }
    public void Display_With_Priority() {

        System.out.println("P" + Id +"\t\t" +priority + "\t\t" + Burst_time + "\t\t" + Starting_time + "\t\t" + Waiting_time + "\t\t" + Turn_around_time);
    }
}

class TaskList {
    int n , sum, In, temp = 0;
    float Avg_Waiting_Time , Avg_TUT_Time;
    Task Tasks[];
    Task2 Tasks2[];
    int[] A;
    int[] B;
    int[] R;

    public void getData() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the no of Process : ");
        n = sc.nextInt();
        Tasks = new Task[n];
        A = new int[n];
        for(int i=0; i<=n-1; i++)
        {
            System.out.println("Enter The Id of Process "+ (i+1) + " : ");
            int id = sc.nextInt();
            System.out.println("Enter The Arrival time of process "+ (i+1) + " : ");
            int Arrival = sc.nextInt();
            System.out.println("Enter The Burst time of process "+ (i+1) + " : ");
            int Burst = sc.nextInt();
            A[i] = Burst;
            Tasks[i] = new Task(id ,Arrival, Burst );
        }
    }
    public void getData_For_Priority() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the no of Process : ");
        n = sc.nextInt();
        Tasks = new Task[n];
        Tasks2 = new Task2[n];
        A = new int[n];
        for(int i=0; i<=n-1; i++)
        {
            System.out.println("Enter The Id of Process "+ (i+1) + " : ");
            int id = sc.nextInt();
            System.out.println("Enter The Priority of process "+ (i+1) + " : ");
            int prio = sc.nextInt();
            System.out.println("Enter The Burst time of process "+ (i+1) + " : ");
            int Burst = sc.nextInt();
            A[i] = prio;
            Tasks2[i] = new Task2(id ,prio, Burst );
        }
    }

    public void getData_For_RR() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the no of Process : ");
        n = sc.nextInt();
        Tasks = new Task[n];
        A = new int[n];
        System.out.println("Enter The Time Interval : ");
        In = sc.nextInt();
        for(int i=0; i<=n-1; i++)
        {
            System.out.println("Enter The Id of Process "+ (i+1) + " : ");
            int id = sc.nextInt();
            System.out.println("Enter The Arrival time of process "+ (i+1) + " : ");
            int Arrival = sc.nextInt();
            System.out.println("Enter The Burst time of process "+ (i+1) + " : ");
            int Burst = sc.nextInt();
            A[i] = Burst;
            Tasks[i] = new Task(id ,Arrival, Burst );
        }
    }


    public void displayData() {
        System.out.println("Process\t\t" + "Arrival Time\t" +"Burst Time\t" + "Starting Time\t" + "Waiting Time\t" + "Turn Around Time");
        for(int i=0; i<n; i++)
        {
            Tasks[i].Display();
        }
        System.out.println("Average Waiting Time      :  " + Avg_Waiting_Time);
        System.out.println("Average Turn_Around_Time  :  " + Avg_TUT_Time);
    }

    public void displayData_For_Priority() {
        System.out.println("Process\t\t" + "Priority\t" +"Burst Time\t" + "Starting Time\t" + "Waiting Time\t" + "Turn Around Time");
        for(int i=0; i<n; i++)
        {
            Tasks2[i].Display_With_Priority();
        }
        System.out.println("Average Waiting Time      :  " + Avg_Waiting_Time);
        System.out.println("Average Turn_Around_Time  :  " + Avg_TUT_Time);
    }

    public void FCFS() {
        sum  = 0;
        Tasks[0].Starting_time = 0;
        for(int i=0; i<n-1; i++)
        {
            sum = sum + A[i];
            Tasks[i+1].Starting_time = sum;
        }
    }
   
    public void SJF() {
        sum = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                int tmp = 0;
                if (A[i] > A[j])
                {
                    tmp = A[i];
                    A[i] = A[j];
                    A[j] = tmp;
                }
            }
        }

        for (int i=0; i<n; i++)
        {
            if(Tasks[i].Burst_time == A[0])
            {
                Tasks[i].Starting_time = 0;
            }
        }
        for (int i=1; i<n; i++)
        {
            for(int k=0; k<n; k++)
            {
                if(Tasks[k].Burst_time == A[i])
                {
                    sum = sum + A[i-1];
                    Tasks[k].Starting_time = sum;
                }
            }
        }
    }

    public void Priority() {
        sum=0;
        B = new int[n];
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                int tmp = 0;
                if (A[i] > A[j])
                {
                    tmp = A[i];
                    A[i] = A[j];
                    A[j] = tmp;
                }
            }
        }
        for(int i=0; i<n; i++)
        {
            for (int j=0; j<n; j++)
            {
                if(Tasks2[j].priority == A[i])
                {
                    B[i] = Tasks2[j].Burst_time;
                }
            }
        }
        for (int i=0; i<n; i++)
        {
            if(Tasks2[i].priority == A[0])
            {
                Tasks2[i].Starting_time = 0;
            }
        }
        for (int i=1; i<n; i++)
        {
            for(int k=0; k<n; k++)
            {
                if(Tasks2[k].priority == A[i])
                {
                    sum = sum + B[i-1];
                    Tasks2[k].Starting_time = sum;
                }
            }
        }
    }

    public void RoundRobin() {
        int t=0;
        int Total_WT=0, Total_TUT=0;
        R = new int[n];
        for(int i=0; i<n; i++)
        {
            R[i] = A[i];
        }
        while (true)
        {
            boolean Complete = true;
            for (int i=0; i<n; i++)
            {
                if(R[i] > 0)
                {
                    Complete = false;
                    if (R[i] > In)
                    {
                        t += In;
                        R[i] -= In;
                    }
                    else
                    {
                        t = t + R[i];
                        Tasks[i].Completion_time = t;
                        t = t - R[i] + In;
                        R[i] = 0;
                    }
                }
            }
            if (Complete)
                break;
        }
        for (int i=0; i<n; i++)
        {
            Tasks[i].Turn_around_time = Tasks[i].Completion_time;
        }
        for (int i=0; i<n; i++)
        {
            Tasks[i].Waiting_time = Tasks[i].Turn_around_time - Tasks[i].Burst_time;
        }
        for (int i=0; i<n; i++)
        {
            Tasks[i].Starting_time = temp;
            temp += In;
        }
        for (int i=0; i<n; i++) {
            Total_WT += Tasks[i].Waiting_time;
            Total_TUT += Tasks[i].Turn_around_time;
        }
        Avg_Waiting_Time = ((float)Total_WT / (float)n);
        Avg_TUT_Time = ((float)Total_TUT / (float)n);
    }
   
    public void Calculate() {
        int Total_WT=0, Total_TUT=0;
        for(int i=0; i<n; i++)
        {
            Tasks[i].Waiting_time = Tasks[i].Starting_time - Tasks[i].Arrival_time;
        }
        for(int i=0; i<n; i++)
        {
            Tasks[i].Turn_around_time = Tasks[i].Waiting_time + Tasks[i].Burst_time;
        }
        for (int i=0; i<n; i++) {
            Total_WT += Tasks[i].Waiting_time;
            Total_TUT += Tasks[i].Turn_around_time;
        }
        Avg_Waiting_Time = ((float)Total_WT / (float)n);
        Avg_TUT_Time = ((float)Total_TUT / (float)n);
    }

    public void Calculate_For_Priority() {
        int Total_WT=0, Total_TUT=0;
        for(int i=0; i<n; i++)
        {
            Tasks2[i].Waiting_time = Tasks2[i].Starting_time - Tasks2[i].Arrival_time;
        }
        for(int i=0; i<n; i++)
        {
            Tasks2[i].Turn_around_time = Tasks2[i].Waiting_time + Tasks2[i].Burst_time;
        }
        for (int i=0; i<n; i++) {
            Total_WT += Tasks2[i].Waiting_time;
            Total_TUT += Tasks2[i].Turn_around_time;
        }
        Avg_Waiting_Time = ((float)Total_WT / (float)n);
        Avg_TUT_Time = ((float)Total_TUT / (float)n);
    }
}

class Assignment_1 {
    public static void main(String[] args) {
        TaskList obj = new TaskList();
        Scanner sc = new Scanner(System.in);
        int ch;
        do{
            System.out.println("1 : FCFS");
            System.out.println("2 : SJF");
            System.out.println("3 : Priority");
            System.out.println("4 : RoundRobin");
            System.out.println("5 : Exit");
            System.out.println("Enter Choice : ");
            ch = sc.nextInt();
           
            switch(ch) {
                case 1 :
                    obj.getData();
                    obj.FCFS();
                    obj.Calculate();
                    obj.displayData();
                    break;
               
                case 2 :
                    obj.getData();
                    obj.SJF();
                    obj.Calculate();
                    obj.displayData();
                    break;
                   
                case 3 :
                    obj.getData_For_Priority();
                    obj.Priority();
                    obj.Calculate_For_Priority();
                    obj.displayData_For_Priority();
                    break;

                case 4 :
                    obj.getData_For_RR();
                    obj.RoundRobin();
                    obj.displayData();
                    break;

                case 5 :
                    System.out.println("End Of Program");
                    System.exit(0);
                    
            }
        }while(ch<=5);
    }
}
