q2- SQL Queries:
    Consider the given Database Schema: for problem statement 1
1.	Dept (Deptno , Name , Location, Managerempid)
2.	Employees  (name, empid, address, city, dob, date_of_joining,gender, salary, deptno)
Gender must take value ‘M’ or ‘F’.
3.	Project(Projectid, title,city).
4.	Works (empid , Projectid, total_hrs_worked);
5.	Dependant(empid, name_of_dependant, age, relation)


mysql> create database TE70;
mysql> use TE70;
mysql> create table Dept(Deptno int(10),Name varchar(10),Location
varchar(10),Managerempid int(10),primary key(Deptno));
mysql> create table Employees(name varchar(10),empid int(10),address
varchar(10),city char(10),dob date,date_of_joining date,gender
char(10),salary int(10),Deptno int(10),primary key(empid),foreign
key(Deptno) references Dept(Deptno));
mysql> alter table Employees add constraint check(gender='F'and
gender=‘M');
mysql> create table Project(Projectid int(10),title varchar(10),city
varchar(10),primary key(Projectid));
mysql> create table Works(empid int(10),Projectid
int(10),total_hrs_worked int(10),foreign key(empid) references
Employees(empid),foreign key(Projectid) references
Project(Projectid));
mysql> create table Dependent(empid int(10),name_of_dependant
varchar(10),age int(10),relation varchar(10), foreign key(empid)
references Employees(empid));
mysql> show databases;
+--------------------+
| Database |
+--------------------+
| information_schema |
| TE70 |
| kkw |
| mysql |
| performance_schema |
| sys |
+--------------------+
6 rows in set (0.03 sec)
mysql> use TE70;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed

mysql> show tables;
+--------------+
| Tables_in_TE70 |
+--------------+
| Dependent |
| Employees |
| Project |
| Works |
| dept |
+--------------+
5 rows in set (0.00 sec)
mysql> select * from Employees;
Empty set (0.00 sec)
mysql> select * from dept;
Empty set (0.01 sec)
mysql> drop database TE70;
Query OK, 5 rows affected (0.63 sec)
mysql> create database TE70;
Query OK, 1 row affected (0.02 sec)
mysql> use TE70;
Database changed
mysql> create table Dept(Deptno int(10),Name varchar(10),Location
varchar(10),Managerempid int(10),primary key(Deptno));
Query OK, 0 rows affected (0.18 sec)
mysql> create table Employees(name varchar(10),empid int(10),address
varchar(10),city char(10),dob date, date_of_joining date, gender
char(10),salary int(10),Deptno int(10),primary key(empid), foreign
key(Deptno) references Dept(Deptno));
Query OK, 0 rows affected (0.23 sec)
mysql> alter table Employees add constraint check(gender='F' and
gender='M');
Query OK, 0 rows affected (0.04 sec)
Records: 0 Duplicates: 0 Warnings: 0
mysql> create table Project(Projectid int(10),title varchar(10),city
varchar(10),primary key(Projectid));
Query OK, 0 rows affected (0.20 sec)
mysql> create table Works(empid int(10),Projectid
int(10),total_hrs_worked int(10),foreign key(empid) references
Employees(empid),foreign key(Projectid) references
Project(Projectid));
Query OK, 0 rows affected (0.23 sec)
mysql> create table Dependent(empid int(10),name_of_dependent
varchar(10),age int(10),relation varchar(10),foreign key(empid)
references Employees(empid));

Query OK, 0 rows affected (0.21 sec)
mysql> insert into Dept values(1,'Rucha','kkwagh',123);
Query OK, 1 row affected (0.04 sec)
mysql> insert into Dept values(2,'Rutuja','kkwagh',456);
Query OK, 1 row affected (0.04 sec)
mysql> select * from Dept;
+--------+---------+----------+--------------+
| Deptno | Name | Location | Managerempid |
+--------+---------+----------+--------------+
| 1 | Rucha | kkwagh | 123 |
| 2 | Rutuja | kkwagh | 456 |
+--------+---------+----------+--------------+
2 rows in set (0.01 sec)
mysql> insert into Employees
values('Rucha',2,'Bhagur','Nashik','2003-05-27','2022-08-03','M',100
0000,1);
Query OK, 1 row affected (0.03 sec)
mysql> select * from Employees;
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | Deptno |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+
| Rucha | 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03 |
M | 1000000 | 1 |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+
1 row in set (0.00 sec)
mysql> insert into Project values(101,'AI','Nashik');
Query OK, 1 row affected (0.03 sec)
mysql> insert into Project values(102,'DS','Mumbai');
Query OK, 1 row affected (0.02 sec)
mysql> select * from Project;
+-----------+-------+--------+
| Projectid | title | city |
+-----------+-------+--------+
| 101 | AI | Nashik |
| 102 | DS | Mumbai |
+-----------+-------+--------+
2 rows in set (0.00 sec)
mysql> insert into Works values(2,101,70);
Query OK, 1 row affected (0.03 sec)
mysql> select * from Works;

+-------+-----------+------------------+
| empid | Projectid | total_hrs_worked |
+-------+-----------+------------------+
| 2 | 101 | 70 |
+-------+-----------+------------------+
1 row in set (0.00 sec)
mysql> insert into Dependent values(2,'Maithili',20,'Friend');
Query OK, 1 row affected (0.03 sec)
mysql> alter table Employees add mobileno varchar(20);
Query OK, 0 rows affected (0.48 sec)
Records: 0 Duplicates: 0 Warnings: 0
mysql> insert into Employees
values('Shivani',3,'SNagar','Pune','2002-07-18','2022-08-01','M',123
456,1,9632587410);
Query OK, 1 row affected (0.04 sec)
mysql> select * from Employees;
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | Deptno | mobileno |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| Rucha | 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03 |
M | 1000000 | 1 | NULL |
| Shivani | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01
| M | 123456 | 1 | 9632587410 |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
2 rows in set (0.00 sec)
mysql> Delete from Project where title='DS';
Query OK, 1 row affected (0.05 sec)
mysql> select * from Employees where name like '%R';
Empty set (0.00 sec)
mysql> select * from Employees where name like 'R%';
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
| name | empid | address | city | dob | date_of_joining |
gender | salary | Deptno | mobileno |
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
| Shivani | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01 |
M | 123456 | 1 | 9632587410 |
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
1 row in set (0.00 sec)
mysql> select * from Dept where Managerempid=123;
+--------+---------+----------+--------------+

| Deptno | Name | Location | Managerempid |
+--------+---------+----------+--------------+
| 1 | Rucha | kkwagh | 123 |
+--------+---------+----------+--------------+
1 row in set (0.00 sec)
mysql> select * from Employees where date_of_joining between
'2022-07-31' and '2022-08-05';
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | Deptno | mobileno |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| Rucha | 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03 |
M | 1000000 | 1 | NULL |
| Shivani | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01
| M | 123456 | 1 | 9632587410 |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
2 rows in set (0.00 sec)
mysql> select name,city from Employees;
+---------+--------+
| name | city |
+---------+--------+
| Rucha | Nashik |
| Shivani | Pune |
+---------+--------+
2 rows in set (0.01 sec)
mysql> select * from Dependent where name_of_dependent='Sumer';
+-------+-------------------+------+----------+
| empid | name_of_dependent | age | relation |
+-------+-------------------+------+----------+
| 2 | Maithili | 20 | Friend |
+-------+-------------------+------+----------+
1 row in set (0.00 sec)
mysql> insert into Dependent values(3,'Sakshi',20,'Friend');
Query OK, 1 row affected (0.03 sec)
mysql> select * from Dependent;
+-------+-------------------+------+----------+
| empid | name_of_dependent | age | relation |
+-------+-------------------+------+----------+
| 2 | Maithili | 20 | Friend |
| 3 | Sakshi | 20 | Friend |
+-------+-------------------+------+----------+
2 rows in set (0.00 sec)
mysql> select Name from Dept;
+---------+
| Name |
+---------+

| Rucha |
| Rutuja |
+---------+
2 rows in set (0.00 sec)
mysql> update Employees set mobileno=9527835472 where empid=2;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1 Changed: 1 Warnings: 0
mysql> insert into Employees
values('Maithili',4,'Dwarka','Nashik','2002-03-15','2017-10-24','M',
45612,2,7845129630);
Query OK, 1 row affected (0.03 sec)
mysql> select * from Employees;
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | Deptno | mobileno |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| Rucha| 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03 |
M | 1000000 | 1 | 9527835472 |
| Shivani | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01
| M | 123456 | 1 | 9632587410 |
| Maithili | 4 | Dwarka | Nashik | 2002-03-15 | 2017-10-24
|M | 45612 | 2 | 7845129630 |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
3 rows in set (0.00 sec)
mysql> insert into Project values(502,'TestP','Hydrabad');
Query OK, 1 row affected (0.02 sec)
mysql> insert into Project values(506,'CS','Mumbai');
Query OK, 1 row affected (0.03 sec)
mysql> select * from Project;
+-----------+-------+----------+
| Projectid | title | city |
+-----------+-------+----------+
| 101 | AI | Nashik |
| 502 | TestP | Hydrabad |
| 506 | CS | Mumbai |
+-----------+-------+----------+
3 rows in set (0.01 sec)
mysql> delete from Project where title='TestP';
Query OK, 1 row affected (0.02 sec)
mysql> select * from Project;
+-----------+-------+--------+
| Projectid | title | city |
+-----------+-------+--------+
| 101 | AI | Nashik |

| 506 | CS | Mumbai |
+-----------+-------+--------+
2 rows in set (0.00 sec)
mysql> select * from Employees where name like '%R';
+-------+-------+---------+--------+------------+-----------------+-
-------+--------+--------+------------+
| name | empid | address | city | dob | date_of_joining |
gender | salary | Deptno | mobileno |
+-------+-------+---------+--------+------------+-----------------+-
-------+--------+--------+------------+
| Maithili | 4 | Dwarka | Nashik | 2002-03-15 | 2017-10-24
| M | 45612 | 2 | 7845129630 |
+-------+-------+---------+--------+------------+-----------------+-
-------+--------+--------+------------+
1 row in set (0.00 sec)
mysql> select * from Employees where name like 'R%';
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
| name | empid | address | city | dob | date_of_joining |
gender | salary | Deptno | mobileno |
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
| Shivani | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01 |
M | 123456 | 1 | 9632587410 |
+-------+-------+---------+------+------------+-----------------+---
-----+--------+--------+------------+
1 row in set (0.00 sec)
mysql> select * from Dept where Location='kkwagh';
+--------+---------+----------+--------------+
| Deptno | Name | Location | Managerempid |
+--------+---------+----------+--------------+
| 1 | Rucha | kkwagh | 123 |
| 2 | Rutuja | kkwagh | 456 |
+--------+---------+----------+--------------+
2 rows in set (0.00 sec)
mysql> select empid,datediff(current_date(),dob)/365 as age from
Employees;
+-------+---------+
| empid | age |
+-------+---------+
| 2 | 19.2192 |
| 3 | 20.0767 |
| 4 | 20.4192 |
+-------+---------+
3 rows in set (0.01 sec)
mysql> select * from Employees where Month(dob)='05';
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | Deptno | mobileno |

+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
| Rucha | 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03
| M | 1000000 | 1 | 9527835472 |
+---------+-------+---------+--------+------------+-----------------
+--------+---------+--------+------------+
1 row in set (0.00 sec)

mysql> select Employees.name,empid,dob,Dept.Deptno,Dept.Name from
Employees,Dept where Month(dob)='01' and Dept.Name='Depart4' and
Employees.Deptno=Dept.Deptno;
+-------+-------+------------+--------+---------+
| name | empid | dob | Deptno | Name |
+-------+-------+------------+--------+---------+
| Rahul | 9 | 2003-01-14 | 4 | Depart4 |
+-------+-------+------------+--------+---------+
1 row in set (0.00 sec)
mysql> select * from Project;
+-----------+------------+--------+
| Projectid | title | city |
+-----------+------------+--------+
| 101 | AI | Nashik |
| 123 | ERPproject | Nashik |
| 506 | CS | Mumbai |
+-----------+------------+--------+
3 rows in set (0.00 sec)
mysql> insert into Works values(6,123,85);
Query OK, 1 row affected (0.04 sec)
mysql> select * from Works;
+-------+-----------+------------------+
| empid | Projectid | total_hrs_worked |
+-------+-----------+------------------+
| 2 | 101 | 70 |
| 3 | 506 | 45 |
| 4 | 506 | 45 |
| 5 | 506 | 45 |
| 6 | 123 | 85 |
+-------+-----------+------------------+
5 rows in set (0.00 sec)




------------------------------------------------------------------------------------------





q3- SQL Queries	all types of Join, Sub-Query and View:
Write at least10 SQL queries for suitable database applications using SQL DML statements.
Note: Instructor will design the queries which demonstrate the use of concepts like all types of Join ,Sub-Query and View
A1/B1




FIRST QUERY
mysql> select Employees.name,empid,dob,Dept.Deptno,Dept.Name from
Employees,Dept where Month(dob)='01' and Dept.Name='Depart4' and
Employees.Deptno=Dept.Deptno;
+-------+-------+------------+--------+---------+
| name | empid | dob | Deptno | Name |
+-------+-------+------------+--------+---------+
| Rahul | 9 | 2003-01-14 | 4 | Depart4 |
+-------+-------+------------+--------+---------+
1 row in set (0.00 sec)
SECOND QUERY
mysql> select name,title as project from employees,works,project
where project.title='ERPsystem' and
works.Projectid=project.projectid and employees.empid=works.empid;
+-----------+-----------+
| name | project |
+-----------+-----------+
| Rushikesh | ERPsystem |
| Akash | ERPsystem |
+-----------+-----------+
2 rows in set (0.00 sec)
THIRD QUERY
mysql> select name,city from Employees where Employees.empid=(select
Works.empid from Works where Works.Projectid=(select
Project.Projectid from Project where title='BakProject' and
Works.Projectid=Project.Projectid) and Employees.empid=Works.empid);
+--------+--------+
| name | city |
+--------+--------+
| Satyam | Nashik |
| Rahul | Nashik |
| Rutuja | Nashik |
+--------+--------+
3 rows in set (0.00 sec)
FOURTH QUERY
mysql> select project.title,sum(total_hrs_worked) from Project,Works
where Works.Projectid=(select Project.Projectid from Project where
title='Bproject') and project.projectid=works.projectid;
+----------+-----------------------+
| title | sum(total_hrs_worked) |
+----------+-----------------------+
| Bproject | 20 |
+----------+-----------------------+

1 row in set (0.00 sec)
FIFTH QUERY
mysql> select Employees.empid,Employees.city,
Works.total_hrs_worked,Works.Projectid,Project.title from Employees,
Works,Project where Project.city=Employees.city and
Employees.empid=Works.empid and Project.Projectid=Works.Projectid;
+-------+--------+------------------+-----------+------------+
| empid | city | total_hrs_worked | Projectid | title |
+-------+--------+------------------+-----------+------------+
| 2 | Nashik | 70 | 101 | AI |
| 4 | Nashik | 45 | 123 | ERPproject |
| 6 | Nashik | 85 | 123 | ERPproject |
+-------+--------+------------------+-----------+------------+
3 rows in set (0.00 sec)
SIX QUERY
mysql> select * from employees where city in (select city from
employees where employees.empid in (select Managerempid from dept))
and address in (select address from employees where employees.empid
in(select Managerempid from dept));
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| name | empid | address | city | dob |
date_of_joining | gender | salary | deptno |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| Avinash | 101 | Bhagur | Nashik | 2003-05-27 | 2022-08-09
| male | 100050 | 1 |
| Sahil | 103 | Bhagur | Nashik | 2002-06-07 | 2022-08-10
| male | 12345 | 2 |
| Atharva | 104 | kkwagh | Nashik | 2002-01-15 | 2022-08-10
| male | 46231 | 3 |
| Vedant | 105 | Bhagur | Nashik | 2002-07-18 | 2022-08-10
| male | 96512 | 4 |
| Rushikesh | 106 | Bhagur | Nashik | 2002-01-18 | 2022-08-10
| male | 965752 | 1 |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 |
| Ajay | 108 | Bhagur | Nashik | 2002-12-16 | 2022-02-24
| male | 12000 | 2 |
| Sagar | 109 | kkwagh | Nashik | 2002-06-24 | 2022-03-16
| male | 130005 | 3 |
| Ketan | 110 | Bhagur | Nashik | 2002-04-18 | 2022-06-24
| male | 14250 | 4 |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
9 rows in set (0.00 sec)
SEVEN QUERY
mysql> select * from Employees where Employees.empid=(select
Works.empid from Works where Works.Projectid=(select Projectid from

Project where title<>'BakProject' and
Works.Projectid=Project.Projectid)and Employees.empid=Works.empid);
+---------+-------+-----------+--------+------------+---------------
--+--------+---------+--------+------------+
| name | empid | address | city | dob |
date_of_joining | gender | salary | Deptno | mobileno |
+---------+-------+-----------+--------+------------+---------------
--+--------+---------+--------+------------+
| Avinash | 2 | Bhagur | Nashik | 2003-05-27 | 2022-08-03
| M | 1000000 | 1 | 9527835472 |
| Rohit | 3 | SNagar | Pune | 2002-07-18 | 2022-08-01
| M | 123456 | 1 | 123456 |
| Sumer | 4 | Dwarka | Nashik | 2002-03-15 | 2017-10-24
| M | 45612 | 2 | 7845129630 |
| Akash | 5 | panchvati | Nashik | 2002-07-10 | 2022-08-10
| M | 45621 | 1 | 6542781 |
| Aditya | 6 | Pathardi | Nashik | 2003-10-24 | 2022-04-27
| M | 546691 | 3 | 6874457 |
+---------+-------+-----------+--------+------------+---------------
--+--------+---------+--------+------------+
5 rows in set (0.00 sec)
Eight Query
mysql> select deptno,avg(salary) from employees group by deptno;
+--------+-------------+
| deptno | avg(salary) |
+--------+-------------+
| 1 | 457860.2500 |
| 2 | 12172.5000 |
| 3 | 88118.0000 |
| 4 | 55381.0000 |
| 5 | 161973.0000 |
+--------+-------------+
5 rows in set (0.00 sec)
Nineth query
mysql> select * from employees where salary > (select salary from
employees where empid in (select empid from works where projectid in
(select projectid from project where title='Tproject')));
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| name | empid | address | city | dob |
date_of_joining | gender | salary | deptno |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| Avinash | 101 | Bhagur | Nashik | 2003-05-27 | 2022-08-09
| male | 100050 | 1 |
| Atharva | 104 | kkwagh | Nashik | 2002-01-15 | 2022-08-10
| male | 46231 | 3 |
| Vedant | 105 | Bhagur | Nashik | 2002-07-18 | 2022-08-10
| male | 96512 | 4 |
| Rushikesh | 106 | Bhagur | Nashik | 2002-01-18 | 2022-08-10
| male | 965752 | 1 |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 |

| Sagar | 109 | kkwagh | Nashik | 2002-06-24 | 2022-03-16
| male | 130005 | 3 |
| Ketan | 110 | Bhagur | Nashik | 2002-04-18 | 2022-06-24
| male | 14250 | 4 |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
7 rows in set (0.00 sec)
Tenth query
mysql> select * from employees e where salary>(select avg(salary)
from employees where deptno=e.deptno);
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| name | empid | address | city | dob |
date_of_joining | gender | salary | deptno |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
| Sahil | 103 | Bhagur | Nashik | 2002-06-07 | 2022-08-10
| male | 12345 | 2 |
| Vedant | 105 | Bhagur | Nashik | 2002-07-18 | 2022-08-10
| male | 96512 | 4 |
| Rushikesh | 106 | Bhagur | Nashik | 2002-01-18 | 2022-08-10
| male | 965752 | 1 |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 |
| Sagar | 109 | kkwagh | Nashik | 2002-06-24 | 2022-03-16
| male | 130005 | 3 |
+-----------+-------+---------+--------+------------+---------------
--+--------+--------+--------+
5 rows in set (0.00 sec)
Eleventh Query
mysql> select name,deptno,count(deptno) from dept where deptno in
(select deptno from Employees group by deptno having count(deptno)>=
all (select count(deptno) from Employees group by deptno));
+----------+--------+---------------+
| name | deptno | count(deptno) |
+----------+--------+---------------+
| Computer | 1 | 2 |
+----------+--------+---------------+
1 row in set (0.00 sec)
Twelveth query
mysql> select employees.deptno,employees.name as
Employee_Name,dept.name as Department from Employees,dept group by
deptno having min(salary)<=all (select min(salary) from Employees
group by deptno);
+--------+---------------+-------------+
| deptno | Employee_Name | Department |
+--------+---------------+-------------+
| 2 | Sahil | Development |
+--------+---------------+-------------+
1 row in set (0.00 sec)

Thirteen Query
mysql> select projectid,count(empid) from Works group by projectid;
+-----------+--------------+
| projectid | count(empid) |
+-----------+--------------+
| 501 | 1 |
| 502 | 1 |
| 503 | 2 |
| 504 | 1 |
+-----------+--------------+
4 rows in set (0.00 sec)
Fourteen Query
mysql> select * from employees where empid not in (select empid from
works);
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | deptno |
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+
| Avinash | 101 | Bhagur | Nashik | 2003-05-27 | 2022-08-09
| male | 100050 | 1 |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 |
| Ajay | 108 | Bhagur | Nashik | 2002-12-16 | 2022-02-24
| male | 12000 | 2 |
| Sagar | 109 | kkwagh | Nashik | 2002-06-24 | 2022-03-16
| male | 130005 | 3 |
| Ketan | 110 | Bhagur | Nashik | 2002-04-18 | 2022-06-24
| male | 14250 | 4 |
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+
5 rows in set (0.00 sec)
Fifteenth Query
mysql> select * from employees,project where empid not in (select
empid from works) and projectid not in (select projectid from
works);
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+-----------+----------+--------+
| name | empid | address | city | dob | date_of_joining
| gender | salary | deptno | Projectid | title | city |
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+-----------+----------+--------+
| Avinash | 101 | Bhagur | Nashik | 2003-05-27 | 2022-08-09
| male | 100050 | 1 | 501 | Bproject | Nashik |
| Atharva | 104 | kkwagh | Nashik | 2002-01-15 | 2022-08-10
| male | 46231 | 3 | 501 | Bproject | Nashik |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 | 501 | Bproject | Nashik |
| Ajay | 108 | Bhagur | Nashik | 2002-12-16 | 2022-02-24
| male | 12000 | 2 | 501 | Bproject | Nashik |

| Sagar | 109 | kkwagh | Nashik | 2002-06-24 | 2022-03-16
| male | 130005 | 3 | 501 | Bproject | Nashik |
| Ketan | 110 | Bhagur | Nashik | 2002-04-18 | 2022-06-24
| male | 14250 | 4 | 501 | Bproject | Nashik |
+---------+-------+---------+--------+------------+-----------------
+--------+--------+--------+-----------+----------+--------+
6 rows in set (0.00 sec)
Sixteenth Query
mysql> select * from employees where deptno in (select deptno from
dept where Location='MainBuilding');
+-----------+-------+-----------+--------+------------+-------------
----+--------+--------+--------+
| name | empid | address | city | dob |
date_of_joining | gender | salary | deptno |
+-----------+-------+-----------+--------+------------+-------------
----+--------+--------+--------+
| Avinash | 101 | Bhagur | Nashik | 2003-05-27 | 2022-08-09
| male | 100050 | 1 |
| Akash | 102 | Amrutdham | Nashik | 2002-07-10 | 2022-08-10
| male | 12345 | 1 |
| Rushikesh | 106 | Bhagur | Nashik | 2002-01-18 | 2022-08-10
| male | 965752 | 1 |
| Anil | 107 | Bhagur | Nashik | 2004-01-18 | 2022-08-16
| male | 753294 | 1 |
+-----------+-------+-----------+--------+------------+-------------
----+--------+--------+--------+
4 rows in set (0.00 sec)
Seventeenth Query
mysql> select empid,count(projectid) from dept, works where
dept.name='development' group by empid having count(projectid)>2 ;
+-------+------------------+
| empid | count(projectid) |
+-------+------------------+
| 111 | 3 |
+-------+------------------+
1 row in set (0.03 sec)
Eighteenth Query
mysql> select empid,datediff(current_date(),dob)/365 as age from
employees where datediff(current_date(),dob)/365 >=all( select
datediff(current_date(),dob)/365 from employees where deptno in
(select deptno from Dept where name='Testing')) and deptno in
(select deptno from Dept where name='Testing');
+-------+---------+
| empid | age |
+-------+---------+
| 110 | 20.3726 |
+-------+---------+
1 row in set (0.00 sec)

Nineteenth Query
mysql> create view x as select project.city,count(name) from
employees,works,project where project.city='pune'and
works.projectid=project.projectid and works.empid=employees.empid;
Query OK, 0 rows affected (0.01 sec)
mysql> select * from x;
+------+-------------+
| city | count(name) |
+------+-------------+
| Pune | 2 |
+------+-------------+
1 row in set (0.00 sec)
Twenteenth Query
mysql> create view b as select count(empid),count(empid)*1000 as
total_allowance from employees;
Query OK, 0 rows affected (0.00 sec)
mysql> select * from b;
+--------------+-----------------+
| count(empid) | total_allowance |
+--------------+-----------------+
| 14 | 14000 |
+--------------+-----------------+
1 row in set (0.00 sec)




----------------------------------------------------------------------------------------




q4- Unnamed PL/SQLcode block: Use of Control structure and Exception handling is mandatory.
borrow/fine assignment


create table borrower(Roll_no int, name1 varchar(20), DOI date, name_of_book varchar(20), status varchar(2));
create table fine(Roll_no int, DOR date, amt int);
insert into borrower values(1,'Umesh',to_date('7-july-2022','DD-MM-YYYY'),'Yayati','I');
insert into borrower values(2,'Bhavesh',to_date('4-june-2022','DD-MM-YYYY'),'The secret','I');
DECLARE
    idate date;
    fine number(10,2);
    ndays int;
   --rno int;
BEGIN
    select DOI into idate from borrower where Roll_no = 2;
    ndays := sysdate - idate;
    fine:=0;
    IF ndays>30 THEN
        fine:=ndays*50;
    ELSIF ( ndays >=15 and ndays <=30) then
        fine:=ndays*5;
    ELSE
        fine:=0;
    END IF;
   
    insert into fine values(3,sysdate,fine);
    update borrower set status = 'R' where Roll_no = 2;
END;




------------------------------------------------------------------------------------------



q5- Write a PL/SQL code block to calculate the area of a circle for a value of radius varying from 5 to 9.
 Store the radius and the corresponding values of the calculated area in an empty table named areas, consisting of
 two columns, radius and area.

DECLARE
-- The radius is declared in 'radius' variable and result in 'area' variable
radius NUMBER;
area NUMBER(10,2);
BEGIN
DBMS_OUTPUT.put_line('Radius | Area of circle ');
DBMS_OUTPUT.put_line('--------------------------------- ');
FOR radius IN 5..9 LOOP
area:=3.14* radius* radius;
DBMS_OUTPUT.put_line(' '|| radius || ' | ' || area);
END LOOP;
END;



-------------------------------------------------------------------------------------------



q6- Named PL/SQL Block: PL/SQL Stored Procedure and Stored Function.
Write a Stored Procedure namely proc_Grade for the categorization of students. If marks scored by students in examination is <=1500 and marks>=990 then students will be placed in distinction category if marks scored are  between  989 and900 category is first  class,  if  marks 899 n 825 category is Higher Second Class.
Write a PL/SQLblock to use procedures created with the above requirement. Stud_Marks(name, total_marks)              Result(Roll,Name, Class)


create table Stud_Marks  (Roll_no number,StudName varchar(20),Total_Marks number);

create table Result1 (Roll_no number, StudName varchar(20),passingClass varchar(10));

insert into Stud_Marks values(5,'Yash Patil',1400);

insert into Stud_Marks values(67,'Ravi Patel',830);

insert into Stud_Marks values(21,'Gaurav Ozar',950);

insert into Stud_Marks values(66,'Shahrukh Khan',1000);

insert into Stud_Marks values(34,'Urvashi Das',889);

insert into Stud_Marks values(75,'Kalpana Chadda',970);

insert into Stud_Marks values(9,'Samuel Jackson',1300);

select * from Stud_Marks;

alter table Stud_Marks add primary key(Roll_no);

create or replace procedure GradeCalculation(rno int) is 
 
    iname varchar(20); 
    imarks number; 
    studresult varchar(20); 
BEGIN 
    SELECT StudName,Total_Marks INTO iname,imarks FROM Stud_Marks WHERE Roll_no=rno; 
    IF imarks>=990 AND imarks<=1500 THEN 
        studresult:='Distinction'; 
    ELSIF imarks>=900 AND imarks<=989 THEN 
        studresult:='FirstClass'; 
    ELSIF imarks>=825 AND imarks<=899 THEN 
        studresult:='SecondClass'; 
 
END IF; 
 
INSERT INTO Result1 VALUES(rno,iname,studresult); 
 
END;
 
exec GradeCalculation(75); 

select * from Result1;
select * from Stud_Marks;


----------------------------------------------------------------------------------------

q7- Cursors:(All types: Implicit, Explicit, Cursor FOR Loop, Parameterized Cursor)
Write a PL/SQL block of code using parameterized Cursor that will merge the data available in the newly created table N_Roll Call with the data available in the table O_RollCall. If the data in the first table already exist in the  second table then that data should be skipped.
Note: Instructor will frame the problem statement for writing PL/SQL block using all types of Cursors in line with the above statement.


create table TE_rec (rno number,div varchar(1),sname varchar(30),marks number);
create table TEA (r_no number,s_name varchar(30),marks number);
create table TEB (r_no number,s_name varchar(30),marks number);

insert into  TE_rec values(1,'B','Hitesh Patil',20);
insert into  TE_rec values(1,'A','Om Patil',21);
insert into  TE_rec values(2,'B','Pranav Patil',28);
insert into  TE_rec values(3,'A','Kunal wani',29);
insert into  TE_rec values(4,'B','Shivam Patil',11);
insert into  TE_rec values(4,'A','Pratik somkuwar',20);
insert into  TE_rec values(2,'A','Prathmesh Date',14);
insert into  TE_rec values(3,'B','Yash Patil',15);
SELECT * FROM TE_rec;
DECLARE
    stud_r TE_rec%rowtype;
    cursor stud_cur is select rno,div,sname,marks from TE_rec;
    maxmarksA number := 0;
    maxmarksB number := 0;
    
    snameA TE_rec.sname%TYPE;
    snameB TE_rec.sname%TYPE;
BEGIN
    OPEN stud_cur;
    LOOP
        FETCH stud_cur INTO stud_r;
        EXIT WHEN stud_cur%notfound;
        IF stud_r.div='A' THEN
          INSERT INTO TEA VALUES(stud_r.rno , stud_r.sname ,stud_r.marks);
            IF stud_r.marks > maxmarksA THEN
                maxmarksA := stud_r.marks;
                snameA := stud_r.sname;
            END IF;
        else
           INSERT INTO TEB values(stud_r.rno , stud_r.sname ,stud_r.marks);
           IF stud_r.marks > maxmarksB THEN
                maxmarksB := stud_r.marks;
                snameB := stud_r.sname;
            END IF;
        End IF;
    END LOOP;
    CLOSE stud_cur;
/*DBMS_OUTPUT.PUT_LINE('I got here:'||:new.col||' is the new value');*/   
DBMS_OUTPUT.PUT_LINE('Topper in A Div ' || snameA || ' : '||maxmarksA);
DBMS_OUTPUT.PUT_LINE('Topper in B Div ' || snameB || ' : '||maxmarksB);

    
END;



SELECT * FROM TEA;
SELECT * FROM TEB;

-----------------------------------------------------------------------------------------

q8- Database Trigger (All Types: Row level and Statement level triggers, Before and After
Triggers).
Write a database trigger on the Library table. The System should keep track of the records that are being  updated  or  deleted.  The  old  value  of  updated  or  deleted  records  should  be  added  in the Library_Audit table.


create table Library_Table(book_id int , book_name varchar(40) ,book_copies int);
create table Library_audit(action varchar(40), book_id int , book_name varchar(40) ,book_copies int , change_date date);

insert into Library_Table values(1, ' the world war ' , 3);
insert into Library_Table values(2, ' dbms ' , 43);
insert into Library_Table values(3, ' smart city ' , 43);
insert into Library_Table values(4, ' iot ' , 83);
create or replace trigger triger_name
before update or delete on Library_Table
for each row
begin
if deleting then
insert into Library_audit values ( 'delete' ,:old.book_id , :old.book_name ,:old.book_copies ,sysdate);
elsif updating then
insert into Library_audit values ( 'update' ,:old.book_id , :old.book_name ,:old.book_copies ,sysdate);
else

DBMS_OUTPUT.PUT_LINE(' no deleting and no updating ');

end if;
end;

--Updating or Deleting Records  from Library_Table will add an entry in Library_audit 
update Library_Table 
set book_copies = 9
where book_id = 1;

delete from Library_table
where book_id = 2;

--Display both tables
select * from Library_Table;
select * from Library_audit;

-----------------------------------------------------------------------------------------

q9- Database Connectivity:
Write  a  program  to  implement  Menu driven MySQL/Oracle  database  connectivity  with  any  front  end language for Python/Java/PHP to implement Database navigation operations (add, delete, edit etc.)
Create a table for employee(empid, name, salary) and perform operations as insert a record, update values, delete particular record, display all record, display employees having salary > 50000, display record for particular employee


import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="manager",
  database="TE37"
)

mycursor = mydb.cursor()

#mycursor.execute("CREATE TABLE employe (empid int , ename  varchar(40) , salary int);")

while(True):
   print(" MENU ")
   print("\n1]insert : ")
   print("\n2]delete : ")
   print("\n3]update : ")
   print("\n4]display all record : ")
   print("\n5]display  record , salary > 50000 : ")
   
   ch = int(input("enter choice : "))
   if(ch == 1):
     input_d1=int(input(" enter the emp id : "))
     input_d2=str(input(" enter the name : "))
     input_d3=int(input(" enter the salary : "))
     sql1 = str("insert into employe(empid,ename,salary) values ({},'{}',{})".format(input_d1,input_d2,input_d3))
     mycursor.execute(sql1)
    
     mydb.commit()
     #mydb.close()
   elif(ch==2):
     input_d12=int(input(" enter the emp id to delete : "))
     sql=str("delete from employe where empid={}".format(input_d12))
     mycursor.execute(sql)
     mydb.commit()
     
     
   elif(ch==3):
     input_d=int(input(" enter the emp id to update the details : "))
     #empid=int(input(" enter the id for updation :"))
     ename=str(input(" enter the name :"))
     esalary=int(input(" enter the salary :"))
     sql4=str("update employe set ename='{}' , salary={} where empid={}".format(ename,esalary,input_d))
     mycursor.execute(sql4)
     mydb.commit()
   elif(ch==4):
     sql=" SELECT * FROM employe;"
     mycursor.execute(sql)
     myresult = mycursor.fetchall()
     for x in myresult:
       print(x)
   elif(ch==5):
     sql=" SELECT * FROM employe where salary > 50000 ;"
     mycursor.execute(sql)
     myresult = mycursor.fetchall()
     print(" records : \n")
     for x in myresult:
       print(x+'\n')
   else :
     break


-------------------------------------------------------------------------------------------



q 10- MongoDB Queries: Design and Develop MongoDB Queries using CRUD operations.(UseCRUDoperations,
 SAVE method, logical operators etc.)

show dbs
TEA70    0.000GB
TE61    0.000GB
admin   0.000GB
config  0.000GB
local   0.000GB
> use TEA70
switched to db TEA70
> db.dropDatabase
function(writeConcern) {
    return this._dbCommand(
        {dropDatabase: 1, writeConcern: writeConcern ? writeConcern : _defaultWriteConcern});
}
> use TEA70
switched to db TEA70
> db.createCollection('books')
{ "ok" : 1 }
> db.books.insert({title:'world war3',desp:'about the war',by:'deepak londhe',url:'www.worldwar.com',tags:['#worldwar','#book'],likes:45})
WriteResult({ "nInserted" : 1 })
> db.books.insert({title:'indian ocian ',desp:'about indian ocean',by:'yash londhe',url:'www.indianocean.com',tags:['#india','indianocean','#book'],likes:45})
WriteResult({ "nInserted" : 1 })
> db.books.insert({title:'rich dad poor dad ',desp:'about the finance',by:'darshana gavande',url:'www.finance.com',tags:['#india','#finance','#book'],likes:45})

WriteResult({ "nInserted" : 1 })

(base) unix@unix-HP-280-G1-MT:~$ mongo
MongoDB shell version v4.2.1
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("82d125fa-7976-436e-82cb-f81afd71fba5") }
MongoDB server version: 4.2.1
Server has startup warnings: 
2022-10-17T13:06:17.602+0530 I  STORAGE  [initandlisten] 
2022-10-17T13:06:17.602+0530 I  STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2022-10-17T13:06:17.602+0530 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2022-10-17T13:06:19.038+0530 I  CONTROL  [initandlisten] 
2022-10-17T13:06:19.038+0530 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2022-10-17T13:06:19.038+0530 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2022-10-17T13:06:19.038+0530 I  CONTROL  [initandlisten] 
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> show dbs
TEA70    0.000GB
TE61    0.000GB
admin   0.000GB
config  0.000GB
local   0.000GB
> use TEA70
switched to db TEA70
> db.books.update({title:'indian ocian'},{title:'indian ocean',tags:['#indianocean','#books']})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.books.update({title:'indian ocian '},{title:'indian ocean',tags:['#indianocean','#books']})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> show Collections
2022-10-17T13:26:19.474+0530 E  QUERY    [js] uncaught exception: Error: don't know how to show [Collections] :
shellHelper.show@src/mongo/shell/utils.js:1139:11
shellHelper@src/mongo/shell/utils.js:790:15
@(shellhelp2):1:1
> show collections
Books
books
TEA70a
> db.books.find().pretty()
{
	"_id" : ObjectId("634d08c41d0f21d998c91d0b"),
	"title" : "world war3",
	"desp" : "about the war",
	"by" : "deepak londhe",
	"url" : "www.worldwar.com",
	"tags" : [
		"#worldwar",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d090c1d0f21d998c91d0c"),
	"title" : "indian ocean",
	"tags" : [
		"#indianocean",
		"#books"
	]
}
{
	"_id" : ObjectId("634d097c1d0f21d998c91d0d"),
	"title" : "rich dad poor dad ",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 45
}
> db.books.insert({title:'bharat ',desp:'about the history of india',by:'darshana gavande',url:'www.india.com',tags:['#india','#bharat','#book'],likes:4})
WriteResult({ "nInserted" : 1 })
> db.books.insert({title:'mongodb',desp:'about the mongo database',by:'deepak londhe',url:'www.mongo.com',tags:['#mongo','#database','#book'],likes:400})
WriteResult({ "nInserted" : 1 })
> db.books.insert({title:'mysql',desp:'about the mysql database',by:'john',url:'www.mysql.com',tags:['#mysql','#database','#book'],likes:400})
WriteResult({ "nInserted" : 1 })
> db.books.find().pretty()
{
	"_id" : ObjectId("634d08c41d0f21d998c91d0b"),
	"title" : "world war3",
	"desp" : "about the war",
	"by" : "deepak londhe",
	"url" : "www.worldwar.com",
	"tags" : [
		"#worldwar",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d090c1d0f21d998c91d0c"),
	"title" : "indian ocean",
	"tags" : [
		"#indianocean",
		"#books"
	]
}
{
	"_id" : ObjectId("634d097c1d0f21d998c91d0d"),
	"title" : "rich dad poor dad ",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d0b3605ea6c0bc8fb1de4"),
	"title" : "bharat ",
	"desp" : "about the history of india",
	"by" : "darshana gavande",
	"url" : "www.india.com",
	"tags" : [
		"#india",
		"#bharat",
		"#book"
	],
	"likes" : 4
}
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "deepak londhe",
	"url" : "www.mongo.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
> db.books.insert({title:'nashik',desp:'about the nashik',by:'deepak londhe',url:'www.nashik.com',tags:['#nashik','#nashikcity','#book'],likes:400,username:'dd.gmail.dd',password:'yash6511'})
WriteResult({ "nInserted" : 1 })
> db.books.remove({username})
2022-10-17T13:39:16.627+0530 E  QUERY    [js] uncaught exception: ReferenceError: username is not defined :
@(shell):1:18
> db.books.remove({username:dd.gmail.dd})
2022-10-17T13:39:28.739+0530 E  QUERY    [js] uncaught exception: ReferenceError: dd is not defined :
@(shell):1:18
> db.books.remove({username:'dd.gmail.dd'})
WriteResult({ "nRemoved" : 1 })
> db.books.insert({title:'nashik',desp:'about the nashik',by:'deepak londhe',url:'www.nashik.com',tags:['#nashik','#nashikcity','#book'],likes:400,username:'dd.gmail.dd',comments:[' nice','wonder book']})
WriteResult({ "nInserted" : 1 })
> db.books.find({title:'mongodb'}).pretty()
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "deepak londhe",
	"url" : "www.mongo.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 400
}
> db.books.find($or:[{title:'mongodb'},{by:'john'}])
2022-10-17T13:44:48.573+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:17
> db.books.find($or:[{title:'mongodb'},{by:'john'}]).pretty()
2022-10-17T13:45:04.859+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:17
> db.books.find({$or:[{title:'mongodb'},{by:'john'}]}).pretty()
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "deepak londhe",
	"url" : "www.mongo.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
> db.books.find({$and:[{title:'mongodb'},{by:'john'}]}).pretty()
> db.books.find({$and:[{title:'mongodb'},{by:'john'}]}).pretty()
> db.books.find({$or:[{title:'mongodb'},{by:'john'}]}).pretty()
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "deepak londhe",
	"url" : "www.mongo.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
> db.books.insert({title:'mongodb',desp:'about the mongo database',by:'john',url:'www.mongodb.com',tags:['#mongo','#database','#book'],likes:4400})
WriteResult({ "nInserted" : 1 })
> db.books.find({$and:[{title:'mongodb'},{by:'john'}]}).pretty()
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}

> db.books.find({$and:[{likes:{$gt:10}},{$or:[{title:'mongodb'},{by:'john'}]}]}).pretty()
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "deepak londhe",
	"url" : "www.mongo.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}

> db.books.find().pretty()
{
	"_id" : ObjectId("634d08c41d0f21d998c91d0b"),
	"title" : "world war3",
	"desp" : "about the war",
	"by" : "deepak londhe",
	"url" : "www.worldwar.com",
	"tags" : [
		"#worldwar",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d090c1d0f21d998c91d0c"),
	"title" : "indian ocean",
	"tags" : [
		"#indianocean",
		"#books"
	]
}
{
	"_id" : ObjectId("634d097c1d0f21d998c91d0d"),
	"title" : "rich dad poor dad ",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d0b3605ea6c0bc8fb1de4"),
	"title" : "bharat ",
	"desp" : "about the history of india",
	"by" : "darshana gavande",
	"url" : "www.india.com",
	"tags" : [
		"#india",
		"#bharat",
		"#book"
	],
	"likes" : 4
}
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb overview"
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0e0605ea6c0bc8fb1de8"),
	"title" : "nashik",
	"desp" : "about the nashik",
	"by" : "deepak londhe",
	"url" : "www.nashik.com",
	"tags" : [
		"#nashik",
		"#nashikcity",
		"#book"
	],
	"likes" : 400,
	"username" : "dd.gmail.dd",
	"comments" : [
		" nice",
		"wonder book"
	]
}
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}
{
	"_id" : ObjectId("634d1390e40e44f886f0ba81"),
	"title" : "mogodb",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 445
}

> db.books.remove({title:'no sql overview '})
WriteResult({ "nRemoved" : 1 })

> db.books.find({by:'john'}).pretty().limit(2)
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}
> db.books.find({by:'john'}).pretty().limit(1).skip(1)
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}

> db.books.find().pretty().sort({key:1})
{
	"_id" : ObjectId("634d08c41d0f21d998c91d0b"),
	"title" : "world war3",
	"desp" : "about the war",
	"by" : "deepak londhe",
	"url" : "www.worldwar.com",
	"tags" : [
		"#worldwar",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d090c1d0f21d998c91d0c"),
	"title" : "indian ocean",
	"tags" : [
		"#indianocean",
		"#books"
	]
}
{
	"_id" : ObjectId("634d097c1d0f21d998c91d0d"),
	"title" : "rich dad poor dad ",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 45
}
{
	"_id" : ObjectId("634d0b3605ea6c0bc8fb1de4"),
	"title" : "bharat ",
	"desp" : "about the history of india",
	"by" : "darshana gavande",
	"url" : "www.india.com",
	"tags" : [
		"#india",
		"#bharat",
		"#book"
	],
	"likes" : 4
}
{
	"_id" : ObjectId("634d0bcb05ea6c0bc8fb1de5"),
	"title" : "mongodb overview"
}
{
	"_id" : ObjectId("634d0c0605ea6c0bc8fb1de6"),
	"title" : "mysql",
	"desp" : "about the mysql database",
	"by" : "john",
	"url" : "www.mysql.com",
	"tags" : [
		"#mysql",
		"#database",
		"#book"
	],
	"likes" : 400
}
{
	"_id" : ObjectId("634d0e0605ea6c0bc8fb1de8"),
	"title" : "nashik",
	"desp" : "about the nashik",
	"by" : "deepak londhe",
	"url" : "www.nashik.com",
	"tags" : [
		"#nashik",
		"#nashikcity",
		"#book"
	],
	"likes" : 400,
	"username" : "dd.gmail.dd",
	"comments" : [
		" nice",
		"wonder book"
	]
}
{
	"_id" : ObjectId("634d0f9805ea6c0bc8fb1de9"),
	"title" : "mongodb",
	"desp" : "about the mongo database",
	"by" : "john",
	"url" : "www.mongodb.com",
	"tags" : [
		"#mongo",
		"#database",
		"#book"
	],
	"likes" : 4400
}
{
	"_id" : ObjectId("634d1390e40e44f886f0ba81"),
	"title" : "mogodb",
	"desp" : "about the finance",
	"by" : "darshana gavande",
	"url" : "www.finance.com",
	"tags" : [
		"#india",
		"#finance",
		"#book"
	],
	"likes" : 445
}

> db.books.save({title:'dbms',desp:'about the database ',by:'priya balak',url:'www.dbms.com',tags:['#sqloverview','#sql','#book'],likes:45})
WriteResult({ "nInserted" : 1 })


---------------------------------------------------------------------------------------------

q 11- MongoDB    Aggregation and Indexing:
Design and Develop MongoDB Queries using aggregation and indexing with suitable examples using MongoDB.
     Create the collection Books having the following fields    TITLE, DESCRIPTION, BY, URL, TAGS AND LIKES.


> use books
switched to db books
> db.books.find().pretty()
{
"_id" : ObjectId("634d0e8cb381e08b621b52eb"),
"TITLE" : "OOP",
"DESCRIPTION" : "Introduction to object oriented prgramming",
"BY" : "E.Balagurusamy",
"URL" : "www.oop.com",
"TAGS" : "Vectors and Array",
"LIKES" : 400
}
{
"_id" : ObjectId("634d0e8cb381e08b621b52ec"),
"TITLE" : "Java",
"DESCRIPTION" : "Introduction to JAVA programming language",
"BY" : "James Gosling",
"URL" : "www.java.com",
"TAGS" : "Array of object,AWT, swing",
"LIKES" : 600
}
{
"_id" : ObjectId("634d1142b381e08b621b52ed"),
"TITLE" : "mongodb overview",
"DESCRIPTION" : "Introduction to mongo",
"BY" : "Amol Nayak",
"URL" : "www.mongo.com",
"TAGS" : "Collection, documents",
"LIKES" : 3
}
{
"_id" : ObjectId("634d1142b381e08b621b52ee"),
"TITLE" : "mongodb",
"DESCRIPTION" : "Introduction to mongo",
"BY" : "John",
"URL" : "www.mongo.com",
"TAGS" : "Collection, documents",
"LIKES" : 200
}
{
"_id" : ObjectId("634d1142b381e08b621b52ef"),
"TITLE" : "OOP",

"DESCRIPTION" : "Introduction to object oriented programming",
"BY" : "John",
"URL" : "www.oop.com",
"TAGS" : "Collection, documents",
"LIKES" : 9
}
{
"_id" : ObjectId("634d11f2b381e08b621b52f1"),
"TITLE" : "mongodb",
"DESCRIPTION" : "Introduction to mongo",
"BY" : "Amol Nayak",
"URL" : "www.mongo.com",
"TAGS" : "Collection, documents",
"LIKES" : 3,
"USERNAME" : "ABC",
"COMMENTS" : "good"
}
> db.books.aggregate([{$match:{BY:"John"}},{$count:"Books published by
john"}])
{ "Books published by john" : 2 }
> db.books.aggregate(
... [
... {$match:{BY:"John"}},
... {
... $group:
... {
... "_id":"$BY",
... MinLikes: { $min: "$LIKES" },
... MaxLikes: { $max: "$LIKES" }
... }
... }
... ]
... )
{ "_id" : "John", "MinLikes" : 9, "MaxLikes" : 200 }
> db.books.aggregate(
... [
... {$match:{BY:"John"}},
... {
... $group:
... {
... "_id":"$BY",

... AvgLikes: { $avg: "$LIKES" },
... }
... }
... ]
... )
{ "_id" : "John", "AvgLikes" : 104.5 }
> db.books.aggregate(
... [
... {$match:{BY:"John"}},
... {
... $group:
... {
... _id: null,
... first: { $first: "$$ROOT" },
... last: { $last: "$$ROOT" }
... }
... }
... ]
... ).pretty()
{
"_id" : null,
"first" : {
"_id" : ObjectId("634d1142b381e08b621b52ee"),
"TITLE" : "mongodb",
"DESCRIPTION" : "Introduction to mongo",
"BY" : "John",
"URL" : "www.mongo.com",
"TAGS" : "Collection, documents",
"LIKES" : 200
},
"last" : {
"_id" : ObjectId("634d1142b381e08b621b52ef"),
"TITLE" : "OOP",
"DESCRIPTION" : "Introduction to object oriented programming",
"BY" : "John",
"URL" : "www.oop.com",
"TAGS" : "Collection, documents",
"LIKES" : 9
}
}
> db.books.createIndex( { by: 1 } )
{

"createdCollectionAutomatically" : false,
"numIndexesBefore" : 1,
"numIndexesAfter" : 2,
"ok" : 1
}

-------------------------------------------------------------------------------------------





